/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Ejb.SessionBeanClientRemote;
import Entities.Client;
import Entities.Compte;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.jms.Topic;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.swing.DefaultListModel;

/**
 *
 * @author adrie
 */
public class ClientGUI extends javax.swing.JFrame
{
    private Client client;
    private List<Compte> listeComptes;
    
    private Topic topic = null;
    private Session session = null;
    
    private MessageProducer producer = null;
    
    /**
     * Creates new form ClientGUI
     */
    public ClientGUI(Client c, Topic top, Session sess)
    {
        initComponents();
        topic = top;
        session = sess;
        client = c;
        
        try
        {         
            producer = session.createProducer(topic);
        }
        catch(JMSException ex)
        {
            System.out.println("JMS error :" + ex);
        }
        
        listeComptes = lookupSessionBeanClientRemote().getComptesClient(client);
        DefaultListModel dlm = new DefaultListModel();
        for(Compte compte : listeComptes)
            dlm.addElement(compte);
        
        compteSourceL.setModel(dlm);
        compteDestinationL.setModel(dlm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        compteBG = new javax.swing.ButtonGroup();
        transfertBtn = new javax.swing.JButton();
        montantTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        compteSourceL = new javax.swing.JList();
        compteClientBtn = new javax.swing.JRadioButton();
        compteAutreClientBtn = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        compteDestinationL = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        compteDestinationTF = new javax.swing.JTextField();
        erreurL = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        transfertBtn.setText("Transférer");
        transfertBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                transfertBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Montant :");

        jScrollPane1.setViewportView(compteSourceL);

        compteBG.add(compteClientBtn);
        compteClientBtn.setText("Mes comptes");

        compteBG.add(compteAutreClientBtn);
        compteAutreClientBtn.setText("Autre client");

        jLabel2.setText("Compte source");

        jLabel3.setText("Compte destination");

        jScrollPane2.setViewportView(compteDestinationL);

        jLabel4.setText("N°compte :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Transfert");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabel2)
                        .addGap(182, 182, 182)
                        .addComponent(compteClientBtn)
                        .addContainerGap(287, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(compteDestinationTF, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                        .addGap(31, 31, 31))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(compteAutreClientBtn)
                                        .addGap(48, 48, 48))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addGap(148, 148, 148))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel5)
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(montantTF, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(transfertBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(erreurL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel3)
                        .addGap(58, 58, 58)
                        .addComponent(compteAutreClientBtn)
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(compteDestinationTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel5)
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(compteClientBtn))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(montantTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transfertBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(erreurL, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void transfertBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_transfertBtnActionPerformed
    {//GEN-HEADEREND:event_transfertBtnActionPerformed
       float montant;
       
       erreurL.setText("");
       try
       {
           montant =Float.parseFloat(montantTF.getText());
       }
       catch(NumberFormatException ex)
       {
           erreurL.setText("Entrez un nombre correcte");
           return;
       }
       
        if(compteSourceL.getSelectedValue() == null)
        {
            erreurL.setText("Vous devez choisir un compte source !");
            return;
        }
        
       if(((Compte)compteSourceL.getSelectedValue()).getSolde() < montant)
       {
           erreurL.setText("Le montant est trop élevé pour ce compte");
           return;
       }
       
       if(compteClientBtn.isSelected())
       {
           if(compteDestinationL.getSelectedValue() == null)
           {
               erreurL.setText("Vous devez choisir un compte source !");
               return;
           }
           
           if(compteSourceL.getSelectedIndex() == compteDestinationL.getSelectedIndex())
           {
               erreurL.setText("Vous ne pouvez pas transférer sur le même compte");
               return;
           }
           
           if(lookupSessionBeanClientRemote().transfert((Compte)compteSourceL.getSelectedValue(), ((Compte)compteDestinationL.getSelectedValue()).getIdcompte(), montant))
           {
                   erreurL.setText("Transfert de "+ montant + " euro(s) effectué du compte "+ ((Compte)compteSourceL.getSelectedValue()).getIdcompte() + " vers le compte " + ((Compte)compteDestinationL.getSelectedValue()).getIdcompte());
                   Message("Transfert de "+ montant + " euro(s) effectué du compte "+ ((Compte)compteSourceL.getSelectedValue()).getIdcompte() + " vers le compte " + ((Compte)compteDestinationL.getSelectedValue()).getIdcompte(), montant);
                   Refresh();
           }
           else
               erreurL.setText("Une erreur est survenue");
       }
       else
       {
           if(compteDestinationTF.equals(""))
           {
               erreurL.setText("Vous devez renseigner un compte de destination");
               return;
           }
           
           if(((Compte)compteSourceL.getSelectedValue()).getIdcompte().equals(compteDestinationTF.getText()))
           {
               erreurL.setText("Vous ne pouvez pas transférer sur le même compte");
               return;
           }
           
           if(lookupSessionBeanClientRemote().transfert((Compte)compteSourceL.getSelectedValue(), compteDestinationTF.getText(), montant))
           {
               erreurL.setText("Transfert de "+ montant + " euro(s) effectué du compte "+ ((Compte)compteSourceL.getSelectedValue()).getIdcompte() + " vers le compte " + compteDestinationTF.getText());
               Message("Transfert de "+ montant + " euro(s) effectué du compte "+ ((Compte)compteSourceL.getSelectedValue()).getIdcompte() + " vers le compte " + compteDestinationTF.getText(), montant);
               Refresh();
           }
           else
               erreurL.setText("Une erreur est survenue");
       }
    }//GEN-LAST:event_transfertBtnActionPerformed

    private void Message(String message, float montant)
    {
        try
        {
            TextMessage tm = session.createTextMessage();
            tm.setText(message);
            
            tm.setStringProperty("type", "log");
            tm.setFloatProperty("montant", montant);
            
            producer.send(tm);
        }
        catch(JMSException ex)
        {
            System.out.println("JMS send error :" + ex);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton compteAutreClientBtn;
    private javax.swing.ButtonGroup compteBG;
    private javax.swing.JRadioButton compteClientBtn;
    private javax.swing.JList compteDestinationL;
    private javax.swing.JTextField compteDestinationTF;
    private javax.swing.JList compteSourceL;
    private javax.swing.JLabel erreurL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField montantTF;
    private javax.swing.JButton transfertBtn;
    // End of variables declaration//GEN-END:variables

    private SessionBeanClientRemote lookupSessionBeanClientRemote()
    {
        try
        {
            Context c = new InitialContext();
            return (SessionBeanClientRemote) c.lookup("java:comp/env/SessionBeanClient");
        } catch (NamingException ne)
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, "exception caught", ne);
            throw new RuntimeException(ne);
        }
    }
    
    private void Refresh()
    {
        listeComptes = lookupSessionBeanClientRemote().getComptesClient(client);
        DefaultListModel dlm = new DefaultListModel();
        for(Compte compte : listeComptes)
            dlm.addElement(compte);
        
        compteSourceL.setModel(dlm);
        compteDestinationL.setModel(dlm);
    }
}
