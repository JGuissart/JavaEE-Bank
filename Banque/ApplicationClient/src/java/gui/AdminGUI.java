/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Entities.Compte;
import classes.CreditEnAttente;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.jms.Topic;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;

/**
 *
 * @author adrie
 */
public class AdminGUI extends javax.swing.JFrame implements MessageListener
{
    private List<String> listeTransactions = new ArrayList<String>();
    private List<CreditEnAttente> listeCredits = new ArrayList<CreditEnAttente>();
    
    
    private Topic topic = null;
    private Session session = null;
    
    private MessageProducer producer = null;
    private MessageConsumer consumer = null;
    
    /**
     * Creates new form AdminGUI
     */
    public AdminGUI(Topic t, Session s)
    {
        initComponents();
        
        montantTotalL.setText("0");
        
        topic = t;
        session = s;
        
        try
        {
            producer = session.createProducer(topic);
            consumer = session.createConsumer(topic);
            consumer.setMessageListener(this);
        }
        catch(JMSException ex)
        {
            System.out.println("JMS Exception : " + ex);
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        validationGrp = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        listeTransactionL = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listeAcceptationsL = new javax.swing.JList();
        validerBtn = new javax.swing.JRadioButton();
        refuserBtn = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        montantTotalL = new javax.swing.JLabel();
        confirmerBtn = new javax.swing.JButton();
        erreurTF = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        listeTransactionL.setEnabled(false);
        jScrollPane1.setViewportView(listeTransactionL);

        jLabel1.setText("Transactions :");

        jScrollPane2.setViewportView(listeAcceptationsL);

        validationGrp.add(validerBtn);
        validerBtn.setText("Valider");

        validationGrp.add(refuserBtn);
        refuserBtn.setText("Refuser");

        jLabel2.setText("Demande de crédit à valider :");

        jLabel3.setText("Montant total : ");

        confirmerBtn.setText("Confirmer");
        confirmerBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                confirmerBtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Administration");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(erreurTF, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(montantTotalL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(validerBtn)
                        .addGap(38, 38, 38)
                        .addComponent(refuserBtn)
                        .addGap(37, 37, 37)
                        .addComponent(confirmerBtn)
                        .addGap(57, 57, 57))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(30, 30, 30))))
            .addGroup(layout.createSequentialGroup()
                .addGap(371, 371, 371)
                .addComponent(jLabel4)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(montantTotalL)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(refuserBtn)
                                .addComponent(validerBtn)
                                .addComponent(confirmerBtn))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addComponent(erreurTF, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confirmerBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_confirmerBtnActionPerformed
    {//GEN-HEADEREND:event_confirmerBtnActionPerformed
        if(validerBtn.isSelected() || refuserBtn.isSelected())
        {
            if(validerBtn.isSelected())
            {
                CreditEnAttente cr = (CreditEnAttente)listeAcceptationsL.getSelectedValue();
                AcceptationMessage(cr);
            }
            else
            {
                CreditEnAttente cr = (CreditEnAttente)listeAcceptationsL.getSelectedValue();
                RefusMessage(cr);
            }
        }
        else
        {
            erreurTF.setText("Veuillez cocher un des boutons !");
        }
    }//GEN-LAST:event_confirmerBtnActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton confirmerBtn;
    private javax.swing.JLabel erreurTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listeAcceptationsL;
    private javax.swing.JList listeTransactionL;
    private javax.swing.JLabel montantTotalL;
    private javax.swing.JRadioButton refuserBtn;
    private javax.swing.ButtonGroup validationGrp;
    private javax.swing.JRadioButton validerBtn;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onMessage(Message message)
    {
        try
        {
            TextMessage tm = (TextMessage)message;
            if(tm.getStringProperty("type").equals("demande"))
            {
                if(tm.getBooleanProperty("acceptation"))
                {
                    System.out.println("Valide");
                    listeTransactions.add(tm.getText());
                    RefreshTransactionList();
                    return;
                }
                else
                {
                    System.out.println("Non Valide");
                    listeCredits.add(new CreditEnAttente(tm));
                    RefreshCreditList();
                    return;
                }
            }
            
            if(tm.getStringProperty("type").equals("log"))
            {
                getFloat(montantTotalL, tm.getFloatProperty("montant"));
                return;
            }
        }
        catch(JMSException ex)
        {
            System.out.println("JMS error :" + ex);
        }
      
    }
    
    public void RefreshTransactionList()
    {
        
        DefaultListModel dlm = new DefaultListModel();
        for(String s : listeTransactions)
            dlm.addElement(s);
        
        listeTransactionL.setModel(dlm);

    }
    
    public void RefreshCreditList()
    {
        
        DefaultListModel dlm = new DefaultListModel();
        for(CreditEnAttente cr : listeCredits)
            dlm.addElement(cr);
        
        listeAcceptationsL.setModel(dlm);

    }
    
    private boolean getFloat(JLabel lab, float ajout)
    {
        try
        {
            float old = Float.parseFloat(lab.getText());
            old = old + ajout;
            lab.setText(Float.toString(old));
            
            return true;
        }
        catch(Exception ex)
        {
            System.out.println("Error : " + ex);
            
            return false;
        }
    }
    
    private void AcceptationMessage(CreditEnAttente c)
    {
        try
        {
            TextMessage tm = session.createTextMessage();

            
            tm.setStringProperty("type", "demande");
            tm.setFloatProperty("montant", new Float(c.getCredit().getMontant()));
            tm.setBooleanProperty("acceptation", true);
            tm.setFloatProperty("taux", new Float(c.getCredit().getTaux()));
            tm.setIntProperty("duree", c.getCredit().getDuree());
            tm.setFloatProperty("salaire", new Float(c.getCredit().getSalaire()));
            tm.setFloatProperty("charge", new Float(c.getCredit().getChargecredit()));
            tm.setStringProperty("client", c.getCredit().getRefclient().getLogin());
            tm.setText("Validation du crédit d'un montant de " + c.getCredit().getMontant() + " et d'un taux de " + c.getCredit().getTaux());
            producer.send(tm);
            
            tm = session.createTextMessage();
            tm.setStringProperty("type", "validation");
            tm.setStringProperty("login", c.getLogin());
            tm.setBooleanProperty("valide", true);
            tm.setStringProperty("client", c.getCredit().getRefclient().getLogin());
         
            producer.send(tm);
            
            listeCredits.remove(c);
            
            RefreshCreditList();
            
        }
        catch(JMSException ex)
        {
            System.out.println("JMS send error :" + ex);
        }
    }
    
    private void RefusMessage(CreditEnAttente c)
    {
        try
        {
            TextMessage tm = session.createTextMessage();

            tm.setStringProperty("type", "validation");
            tm.setStringProperty("login", c.getLogin());
            tm.setBooleanProperty("valide", false);
            tm.setStringProperty("client", c.getCredit().getRefclient().getLogin());
            producer.send(tm);
            
            listeCredits.remove(c);
            
            RefreshCreditList();
            
        }
        catch(JMSException ex)
        {
            System.out.println("JMS send error :" + ex);
        }
    }
}
