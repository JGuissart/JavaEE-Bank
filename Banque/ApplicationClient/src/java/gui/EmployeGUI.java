/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Ejb.SessionBeanBanqueRemote;
import Entities.Client;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.jms.Topic;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author adrie
 */
public class EmployeGUI extends javax.swing.JFrame implements MessageListener
{
    private Topic topic = null;
    private Session session = null;
    private MessageProducer producer = null;
    private MessageConsumer consumer = null;

    private List<Client> listeClient;
    public EmployeGUI(Topic t, Session s)
    {
        initComponents();
        
        topic = t;
        session = s;
        
        try
        {
            consumer = session.createConsumer(topic);
            consumer.setMessageListener(this);
        }
        catch(JMSException ex)
        {
            System.out.println("JMSException : " + ex);
        }
        listeClient = lookupSessionBeanBanqueRemote().getClients();
        DefaultListModel dlm = new DefaultListModel();
        
        for(Client c : listeClient)
            dlm.addElement(c);
        
        listeClients.setModel(dlm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        demandeBtn = new javax.swing.JButton();
        montantTF = new javax.swing.JTextField();
        tauxTF = new javax.swing.JTextField();
        dureeTF = new javax.swing.JTextField();
        salaireTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listeClients = new javax.swing.JList();
        erreurTF = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        chargeTF = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        demandeBtn.setText("Demande");
        demandeBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                demandeBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Montant :");

        jLabel2.setText("Taux :");

        jLabel3.setText("Durée :");

        jLabel4.setText("Salaire : ");

        jLabel5.setText("Clients :");

        jScrollPane1.setViewportView(listeClients);

        jLabel6.setText("Charge :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Demande de crédit");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(206, 206, 206)
                .addComponent(jLabel7)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(erreurTF)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(demandeBtn)
                        .addGap(83, 83, 83))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(dureeTF)
                                            .addComponent(tauxTF, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(montantTF)
                                            .addComponent(salaireTF, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(84, 84, 84)
                                        .addComponent(jLabel5))
                                    .addComponent(chargeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(45, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(erreurTF))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(montantTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(tauxTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(dureeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(salaireTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(chargeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(48, 48, 48)))
                        .addComponent(demandeBtn)))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void demandeBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_demandeBtnActionPerformed
    {//GEN-HEADEREND:event_demandeBtnActionPerformed
        erreurTF.setText("");

        //vérification montant
        float montant;
        try
        {
            montant=Float.parseFloat(montantTF.getText());
        } catch (Exception e)
        {
            erreurTF.setText("Le montant est invalide");
            return;
        }
        if(montant<=0)
        {
            erreurTF.setText("Vérifiez que le montant soit bien supérieur à 0");
            return;
        }
        
        
        //verification taux
        float taux;
        try
        {
            taux=Float.parseFloat(tauxTF.getText());
        } catch (Exception e)
        {
            erreurTF.setText("Le taux est invalide");
            return;
        }
        if(taux<=0)
        {
            erreurTF.setText("Vérifiez que le taux est supérieur à 0");
            return;
        }
        
        //vérification durée
        int duree;
        try
        {
            duree=Integer.parseInt(dureeTF.getText());
        } catch (Exception e)
        {
            erreurTF.setText("La durée est invalide");
            return;
        }
        if(duree<=0)
        {
            erreurTF.setText("Vérifiez que la durée est supérieure à 0");
            return;
        }
        
        
        //vérification du salaire
        float salaire;
        try
        {
            salaire=Float.parseFloat(salaireTF.getText());
        } catch (Exception e)
        {
            erreurTF.setText("Le salaire est invalide");
            return;
        }
        if(salaire<=0)
        {
            erreurTF.setText("Vérifiez que le salaire est supérieur à 0");
            return;
        }
        
        //vérification de la charge de crédit
        float charge;
        try
        {
            charge=Float.parseFloat(chargeTF.getText());
        } catch (Exception e)
        {
            erreurTF.setText("Le salaire est invalide");
            return;
        }
        if(charge<=0)
        {
            erreurTF.setText("Vérifiez que la charge est supérieur à 0");
            return;
        }
        
        
        //vérification qu'un client est séléctionné
        Client cli = (Client)listeClients.getSelectedValue();
        if(cli==null)
        {
            erreurTF.setText("Selectionnez un client");
            return;
        }
        
        int ret = lookupSessionBeanBanqueRemote().demandeCredit(montant, taux, duree, salaire, charge, cli);
        
        switch(ret)
        {
            case 1 :
                erreurTF.setText("Crédit accepté");
                break;
            case -1 :
                erreurTF.setText("Crédit en attente de validation");
                break;
            case 0 : 
                erreurTF.setText("Erreur de traitement");
                break;
            default:
                erreurTF.setText("Erreur");
                break;
        }    
    }//GEN-LAST:event_demandeBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField chargeTF;
    private javax.swing.JButton demandeBtn;
    private javax.swing.JTextField dureeTF;
    private javax.swing.JLabel erreurTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList listeClients;
    private javax.swing.JTextField montantTF;
    private javax.swing.JTextField salaireTF;
    private javax.swing.JTextField tauxTF;
    // End of variables declaration//GEN-END:variables

    private SessionBeanBanqueRemote lookupSessionBeanBanqueRemote()
    {
        try
        {
            Context c = new InitialContext();
            return (SessionBeanBanqueRemote) c.lookup("java:comp/env/SessionBeanBanque");
        } catch (NamingException ne)
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, "exception caught", ne);
            throw new RuntimeException(ne);
        }
    }

    @Override
    public void onMessage(Message message)
    {
        TextMessage tm = (TextMessage)message;
        
        try
        {
            System.out.println("test0");
            System.out.println(tm.getStringProperty("type"));
            System.out.println(tm.getStringProperty("login"));
            System.out.println(lookupSessionBeanBanqueRemote().getEmployeLogin());
            if(tm.getStringProperty("type").equals("validation") && tm.getStringProperty("login").equals(lookupSessionBeanBanqueRemote().getEmployeLogin()))
            {
                if(tm.getBooleanProperty("valide"))
                {
                    JOptionPane.showMessageDialog(this, "Le credit de " + tm.getStringProperty("client") + " a été accepté");
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "Le credit de " + tm.getStringProperty("client") + " a été refusé");
                }
            }
        }
        catch(Exception ex)
        {
            System.out.println("Erreur : " + ex);
        }
    }
}
